hub:
  extraConfig:
    azureADConfig: |
      """
      Custom Authenticator to use Azure AD with JupyterHub
      """

      import json
      import jwt
      import os
      import urllib

      from tornado.auth import OAuth2Mixin
      from tornado.log import app_log
      from tornado.httpclient import HTTPRequest, AsyncHTTPClient

      from jupyterhub.auth import LocalAuthenticator

      from traitlets import Unicode, default

      from oauthenticator.oauth2 import OAuthLoginHandler, OAuthenticator

      class AzureAdOAuthenticator(OAuthenticator):
          login_service = Unicode(
                      os.environ.get('LOGIN_SERVICE', 'Azure AD'),
                      config=True,
                      help="""Azure AD domain name string, e.g. My College"""
              )

          tenant_id = Unicode(config=True, help="The Azure Active Directory Tenant ID")

          @default('tenant_id')
          def _tenant_id_default(self):
              return os.environ.get('AAD_TENANT_ID', '')

          username_claim = Unicode(config=True)

          @default('username_claim')
          def _username_claim_default(self):
              return 'name'

          @default("authorize_url")
          def _authorize_url_default(self):
              return 'https://login.microsoftonline.com/{0}/oauth2/authorize'.format(self.tenant_id)

          @default("token_url")
          def _token_url_default(self):
              return 'https://login.microsoftonline.com/{0}/oauth2/token'.format(self.tenant_id)

          async def authenticate(self, handler, data=None):
              code = handler.get_argument("code")
              http_client = AsyncHTTPClient()

              params = dict(
                  client_id=self.client_id,
                  client_secret=self.client_secret,
                  grant_type='authorization_code',
                  code=code,
                  redirect_uri=self.get_callback_url(handler))

              data = urllib.parse.urlencode(
                  params, doseq=True, encoding='utf-8', safe='=')

              url = self.token_url

              headers = {
                  'Content-Type':
                  'application/x-www-form-urlencoded; charset=UTF-8'
              }
              req = HTTPRequest(
                  url,
                  method="POST",
                  headers=headers,
                  body=data  # Body is required for a POST...
              )

              resp = await http_client.fetch(req)
              resp_json = json.loads(resp.body.decode('utf8', 'replace'))

              # app_log.info("Response %s", resp_json)
              access_token = resp_json['access_token']

              id_token = resp_json['id_token']
              decoded = jwt.decode(id_token, verify=False)

              # userdict = {"name": decoded[self.username_claim]}
              user_unique_id = jwt.decode(resp_json['access_token'], verify=False)['unique_name'].split('@')[0]
              userdict = {"name": user_unique_id}
              userdict["auth_state"] = auth_state = {}
              auth_state['access_token'] = access_token
              # results in a decoded JWT for the user data
              # auth_state['user'] = decoded
              auth_state['user'] = decoded

              return userdict

      class LocalAzureAdOAuthenticator(LocalAuthenticator, AzureAdOAuthenticator):
          """A version that mixes in local system user creation"""
          pass

      def notebook_dir_hook(spawner):
          # Had to be careful here... don't want to overwrite other variables
          # stored in the env dictionary by other tools (like z2jh)
          # spawner.environment = {'NB_USER':spawner.user.name, 'NB_UID':'2000', 'NB_GID':'2000'}
          spawner.environment['NB_USER'] = spawner.user.name
          # spawner.environment['NB_UID'] = '2000'
          # spawner.environment['NB_GID'] = '2000'

      # I modify the authenticator above to parse out a
      # reasonable user name for JHub.
      # from oauthenticator.azuread import AzureAdOAuthenticator
      c.JupyterHub.authenticator_class = AzureAdOAuthenticator
      c.Application.log_level = 'DEBUG'

      c.AzureAdOAuthenticator.tenant_id = 'REQUIRED'
      c.AzureAdOAuthenticator.oauth_callback_url = 'https://yourdomain.com/hub/oauth_callback'
      c.AzureAdOAuthenticator.client_id = 'REQUIRED'
      c.AzureAdOAuthenticator.client_secret = 'REQUIRED'
      c.Spawner.pre_spawn_hook = notebook_dir_hook      # Custom variables added to relevant NB arguments...
